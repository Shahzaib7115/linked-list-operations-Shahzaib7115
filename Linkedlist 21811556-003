#include<iostream>
 using namespace std;

 class Node {
 public:
     int value;
     Node* next;

     Node(int data) {
         value = data;
         next = NULL;
     }
 };

 void insertAtBeginning(Node* &head, int val) {
     Node* new_Node = new Node(val);
     new_Node->next = head;
     head = new_Node;
 }

 void displayList(Node* head) {
     Node* temp = head;
     while (temp != NULL) {
         cout << temp->value << "->";
         temp = temp->next;
     }
     cout << "NULL" << endl;
 }

 void insertAtEnd(Node* &head, int val) {
     Node* new_Node = new Node(val);
     if (head == NULL) {
         head = new_Node;
         return;
     }
     Node* current = head;
     while (current->next != NULL) {
         current = current->next;
     }
     current->next = new_Node;
 }

 void insertAtPosition(Node* &head, int val, int position) {
     if (position == 0) {
         insertAtBeginning(head, val);
         return;
     }
     Node* new_Node = new Node(val);
     Node* temp = head;
     int current_position = 0;
     while (current_position != position - 1) {
         temp = temp->next;
         current_position++;
     }
     new_Node->next = temp->next;
     temp->next = new_Node;
 }

 bool searchValue(Node* head, int val) {
     Node* current = head;
     while (current != NULL) {
         if (current->value == val) {
             return true;
         }
         current = current->next;
     }
     return false;
 }

 void updateAtPosition(Node* head, int val, int position) {
     Node* current = head;
     int current_position = 0;
     while (current != NULL && current_position != position) {
         current = current->next;
         current_position++;
     }
     if (current != NULL) {
         current->value = val;
     }
 }

 void deleteFromStart(Node* &head) {
     if (head != NULL) {
         Node* temp = head;
         head = head->next;
         delete temp;
     }
 }

 void deleteFromEnd(Node* &head) {
     if (head == NULL || head->next == NULL) {
         delete head;
         head = NULL;
         return;
     }
     Node* temp = head;
     while (temp->next->next != NULL) {
         temp = temp->next;
     }
     delete temp->next;
     temp->next = NULL;
 }

 void deleteAtPosition(Node* &head, int position) {
     if (head == NULL) {
         return;
     }
     if (position == 0) {
         deleteFromStart(head);
         return;
     }
     Node* temp = head;
     int current_position = 0;
     while (temp != NULL && current_position < position - 1) {
         temp = temp->next;
         current_position++;
     }
     if (temp == NULL || temp->next == NULL) {
         return;
     }
     Node* toDelete = temp->next;
     temp->next = temp->next->next;
     delete toDelete;
 }

 void searchAndUpdateValue(Node* head, int searchVal, int newVal) {
     Node* current = head;
     while (current != NULL) {
         if (current->value == searchVal) {
             current->value = newVal;
             return;
         }
         current = current->next;
     }
 }

 int main() {
     Node* head = NULL;

     insertAtEnd(head, 1);
     displayList(head);

     insertAtEnd(head, 2);
     displayList(head);

     insertAtPosition(head, 3, 1);
     displayList(head);

     cout << "Search for 2: " << (searchValue(head, 2) ? "Found" : "Not Found") << endl;

     updateAtPosition(head, 5, 1);
     displayList(head);

     deleteFromStart(head);
     displayList(head);

     deleteFromEnd(head);
     displayList(head);

     deleteAtPosition(head, 1);
     displayList(head);

     searchAndUpdateValue(head, 1, 10);
     displayList(head);

     return 0;
 }
